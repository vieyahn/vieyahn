#!/usr/bin/python
#encoding: utf-8

import random
import re


def trans_to_filled_bits(number, width=8):
    """"把数字转换成固定长度
        比如18，转换成8位的：00000018
    """
    number_str = str(number)
    return number_str.zfill(width) 


the_date = "20180108"
deal_item_lines基金账号不存在 0000000000000000 20180104",
基金账号不存在 0000000000000000 20180104"]
deal_counts_8_bits = trans_to_filled_bits(len(deal_item_lines))

# 代码还有个bug，如果deal_item_lines是空行，那边会多输出一个空行，不过，一般不会是空行，这个bug我也不处理了

filled_variables = {"date": the_date,
                     "deal_counts_8_bits": deal_counts_8_bits,
                     "deal_item_lines": '\n'.join(deal_item_lines)}


def sub_variable(text, key, value):
    return re.sub(r"{{[^}]*" + key + r"[^}]*}}", value, text)

def sub_variables(text, variables):
    for key in variables:
        text = sub_variable(text, key, variables[key])
    return text






template_file = open("template.txt")
template = template_file.read()

trans_template = sub_variables(template, filled_variables)
print trans_template
